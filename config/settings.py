"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# settings.py
from pathlib import Path
from datetime import timedelta
import os
from django.core.exceptions import ImproperlyConfigured
from urllib.parse import urlparse
from dotenv import load_dotenv
import dj_database_url

# ───────────────────────────────── Base / env
BASE_DIR = Path(__file__).resolve().parent.parent
env_file = f".env.{os.getenv('ENV', 'local')}"
load_dotenv(BASE_DIR / env_file)  # loads .env.local, .env.staging, or .env.production
ENV = os.getenv("ENV", "local").lower()  # local | staging | production

# Fail fast if no secret
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY is not set")

def csv(name, default=""):
    v = os.getenv(name, default)
    return [s.strip() for s in v.split(",") if s.strip()]

# DEBUG controlled by env only (no implicit override)
DEBUG = os.getenv("DEBUG", "true" if ENV == "local" else "false").lower() == "true"

# Useful for building links in emails, etc.
SITE_DOMAIN = os.getenv("SITE_DOMAIN", "localhost:8000")

ADMINS = [('Nebula Admin', 'admin@nebulacodeacademy.com')]
SERVER_EMAIL = 'errors@nebulacodeacademy.com'

# ───────────────────────────────── Hosts / CORS / CSRF
ALLOWED_HOSTS = csv("ALLOWED_HOSTS", "localhost,127.0.0.1")
CORS_ALLOWED_ORIGINS = csv("CORS_ALLOWED_ORIGINS", "http://localhost:3000")
CSRF_TRUSTED_ORIGINS = csv("CSRF_TRUSTED_ORIGINS")

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',

    # Third-party
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',

    # Your apps
    'core.apps.CoreConfig',
    'program.apps.ProgramConfig',
    'module.apps.ModuleConfig',
    'worksheet.apps.WorksheetConfig',
    'classes.apps.ClassesConfig',
    'support.apps.SupportConfig',
    'people.apps.PeopleConfig',
    'news.apps.NewsConfig',
    'event.apps.EventConfig',
    'certificate.apps.CertificateConfig',
    'achievement.apps.AchievementConfig',
    'dashboard.apps.DashboardConfig',
    'badgetasks.apps.BadgetasksConfig',
    'engagement',  # ensure this is a valid app module
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    # CORS must be before CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

ROOT_URLCONF = 'config.urls'          # keep consistent with your project
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],   # optional, create the folder if you like
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# ───────────────────────────────── Database
# Prefer DATABASE_URL if present, else SQLite for local
DATABASE_URL = (os.getenv("DATABASE_URL") or "").strip()

if DATABASE_URL:
    DATABASES = {
        "default": dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=60,
            ssl_require=True,  # works with Railway/Supabase/etc
        )
    }
else:
    # Fallback for local dev when DATABASE_URL isn't set
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# ───────────────────────────────── REST / JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # If you use throttling, also set DEFAULT_THROTTLE_CLASSES
    # 'DEFAULT_THROTTLE_CLASSES': ['rest_framework.throttling.UserRateThrottle'],
    'DEFAULT_THROTTLE_RATES': {
        'password_reset': '3/hour',
    },
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Nebula Code Academy API',
    'DESCRIPTION': 'API documentation for program structure and related resources.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

AUTH_USER_MODEL = 'core.User'

# ───────────────────────────────── Email (env-driven)
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'sandbox.smtp.mailtrap.io')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '2525'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'true').lower() == 'true'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@nebulacodeacademy.com')

# ───────────────────────────────── Static / Media
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# If you later add media storage (Cloudinary/S3), configure here.

# ───────────────────────────────── Security / HTTPS
# Respect X-Forwarded-Proto from Railway/Render
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

# ✅ NEW: make cookies valid on your subdomain
SESSION_COOKIE_DOMAIN = ".nebulacodeacademy.com"
CSRF_COOKIE_DOMAIN = ".nebulacodeacademy.com"

# Defaults; tighten in staging/prod
#SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'false').lower() == 'true'
#CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'false').lower() == 'true'
SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'false').lower() == 'true'

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # must be present for admin
    # ...any others you use
]


if ENV in ('staging', 'production'):
    SECURE_SSL_REDIRECT = True if os.getenv('SECURE_SSL_REDIRECT', '').strip() == '' else SECURE_SSL_REDIRECT
    SESSION_COOKIE_SECURE = True if os.getenv('SESSION_COOKIE_SECURE', '').strip() == '' else SESSION_COOKIE_SECURE
    CSRF_COOKIE_SECURE = True if os.getenv('CSRF_COOKIE_SECURE', '').strip() == '' else CSRF_COOKIE_SECURE

    # 🔐 behind Railway's proxy
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    USE_X_FORWARDED_HOST = True

    # 🍪 make session/CSRF cookies survive the proxy
    SESSION_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SAMESITE = "Lax"

    # HSTS etc.
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '0' if ENV == 'staging' else '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'true').lower() == 'true'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'true').lower() == 'true'
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'


# ───────────────────────────────── I18N
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ───────────────────────────────── Logging
# Prefer console logging in containers; disable file handlers by default
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {'format': '[{levelname}] {asctime} {name} | {message}', 'style': '{'},
    },
    'handlers': {
        'console': {'class': 'logging.StreamHandler', 'formatter': 'verbose'},
        # If you really want files, ensure the directory exists at startup.
        # 'file': {'class': 'logging.FileHandler', 'filename': str(BASE_DIR / 'logs/app.log'), 'formatter': 'verbose'},
    },
    'loggers': {
        '': {'handlers': ['console'], 'level': LOG_LEVEL},
        'django.request': {'handlers': ['console'], 'level': 'ERROR', 'propagate': False},
    },
}
