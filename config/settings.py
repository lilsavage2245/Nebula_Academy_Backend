"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# settings.py
from pathlib import Path
from datetime import timedelta
import os
from django.core.exceptions import ImproperlyConfigured
from urllib.parse import urlparse
from dotenv import load_dotenv
import dj_database_url
from celery.schedules import crontab

# ───────────────────────────────── Base / env
BASE_DIR = Path(__file__).resolve().parent.parent
env_file = f".env.{os.getenv('ENV', 'local')}"
STORAGE_BACKEND = os.getenv("STORAGE_BACKEND", "local")  # local | s3
load_dotenv(BASE_DIR / env_file)  # loads .env.local, .env.staging, or .env.production
ENV = os.getenv("ENV", "local").lower()  # local | staging | production

DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"   # e.g. C:\...\nebula_backend\media
TIME_ZONE = os.getenv("TIMEZONE", "Europe/London")


CELERY_BEAT_SCHEDULE = {
    "assign-weekly-tasks-monday-0005": {
        "task": "badgetasks.tasks.assign_weekly_tasks_job",
        "schedule": crontab(hour=0, minute=5, day_of_week="monday"),
    },
}

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")

CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]  # IMPORTANT: list, not string
CELERY_TIMEZONE = TIME_ZONE

# Optional: speed up dev, avoid storing results if you don't need them
# CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", None)

CF_ACCOUNT_ID = os.getenv("CF_ACCOUNT_ID")
CF_STREAM_TOKEN = os.getenv("CF_STREAM_TOKEN")
CF_WEBHOOK_SECRET = os.getenv("CF_WEBHOOK_SECRET")

# parse CSV list of allowed origins
FRONTEND_ALLOWED_ORIGINS = [
    o.strip() for o in os.getenv("FRONTEND_ALLOWED_ORIGINS", "").split(",") if o.strip()
]

# Fail fast if no secret
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY is not set")

def csv(name, default=""):
    v = os.getenv(name, default)
    return [s.strip() for s in v.split(",") if s.strip()]

# DEBUG controlled by env only (no implicit override)
DEBUG = os.getenv("DEBUG", "true" if ENV == "local" else "false").lower() == "true"

# Useful for building links in emails, etc.
SITE_DOMAIN = os.getenv("SITE_DOMAIN", "localhost:8000")

ADMINS = [('Nebula Admin', 'admin@nebulacodeacademy.com')]
SERVER_EMAIL = 'errors@nebulacodeacademy.com'

# ───────────────────────────────── Hosts / CORS / CSRF
#ALLOWED_HOSTS = csv("ALLOWED_HOSTS", "localhost,127.0.0.1")
ALLOWED_HOSTS = [
    "api-staging.nebulacodeacademy.com",
    "localhost",
    "127.0.0.1",
]
#CORS_ALLOWED_ORIGINS = csv("CORS_ALLOWED_ORIGINS", "http://localhost:3000")
CORS_ALLOWED_ORIGINS = csv("CORS_ALLOWED_ORIGINS")
CSRF_TRUSTED_ORIGINS = csv("CSRF_TRUSTED_ORIGINS")

FRONTEND_URL = (
    os.getenv("FRONTEND_URL")
    or os.getenv("FRONTEND_ORIGIN")  # fallback if you’ve set this one already
    or ("https://staging.nebulacodeacademy.com" if ENV == "staging" else "http://localhost:3000")
)

# Frontend base (used in emails)
FRONTEND_ORIGIN = os.getenv("FRONTEND_ORIGIN", "http://localhost:3000")
# Path for the verification page (keep one place of truth)
FRONTEND_VERIFY_PATH = "/verify-email"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',

    # Third-party
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',

    # Your apps
    'core.apps.CoreConfig',
    'program.apps.ProgramConfig',
    'module.apps.ModuleConfig',
    'worksheet.apps.WorksheetConfig',
    'classes.apps.ClassesConfig',
    'support.apps.SupportConfig',
    'people.apps.PeopleConfig',
    'news.apps.NewsConfig',
    'event.apps.EventConfig',
    'certificate.apps.CertificateConfig',
    'achievement.apps.AchievementConfig',
    'dashboard.apps.DashboardConfig',
    'badgetasks.apps.BadgetasksConfig',
    'engagement',  # ensure this is a valid app module
    'application.apps.ApplicationConfig',

]

if STORAGE_BACKEND == "local":
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

elif STORAGE_BACKEND == "s3":
    # pip install "django-storages[boto3]"
    INSTALLED_APPS = [*INSTALLED_APPS, "storages"]

    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", None)
    AWS_S3_ENDPOINT_URL = os.getenv("AWS_S3_ENDPOINT_URL", None)  # optional for MinIO or custom endpoint
    AWS_S3_SIGNATURE_VERSION = os.getenv("AWS_S3_SIGNATURE_VERSION", "s3v4")

    # Security: keep objects PRIVATE; URLs will be signed
    AWS_DEFAULT_ACL = None
    AWS_QUERYSTRING_AUTH = True
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",  # adjust per need
    }

    # Optional: custom domain (CloudFront). If you use this, still keep private + signed
    AWS_S3_CUSTOM_DOMAIN = os.getenv("AWS_S3_CUSTOM_DOMAIN", None)

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    # CORS must be before CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ["*"]
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

ROOT_URLCONF = 'config.urls'          # keep consistent with your project
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],   # optional, create the folder if you like
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# ───────────────────────────────── Database
# Prefer DATABASE_URL if present, else SQLite for local
DATABASE_URL = (os.getenv("DATABASE_URL") or "").strip()

if ENV in ("staging", "production") and not DATABASE_URL:
    # Never silently fall back in non-local envs
    raise ImproperlyConfigured("DATABASE_URL is not set in staging/production")

if DATABASE_URL:
    DATABASES = {
        "default": dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=60,
            ssl_require=True,
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# ───────────────────────────────── REST / JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # If you use throttling, also set DEFAULT_THROTTLE_CLASSES
    # 'DEFAULT_THROTTLE_CLASSES': ['rest_framework.throttling.UserRateThrottle'],
    'DEFAULT_THROTTLE_RATES': {
        'password_reset': '3/hour',
    },
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Nebula Code Academy API',
    'DESCRIPTION': 'API documentation for program structure and related resources.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

AUTH_USER_MODEL = 'core.User'

# ───────────────────────────────── Email (env-driven)
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'sandbox.smtp.mailtrap.io')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '2525'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'Nebula Academy <no-reply@nebulacodeacademy.com>')
EMAIL_USE_SSL = False  # don't mix TLS+SSL

# ───────────────────────────────── Static / Media
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# --- STAGING/PRODUCTION (keep strict) ---
if ENV in ("staging", "production"):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_X_FORWARDED_HOST = True

    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SAMESITE = "Lax"

    # Cookies scoped to your domain in hosted envs only
    SESSION_COOKIE_DOMAIN = ".nebulacodeacademy.com"
    CSRF_COOKIE_DOMAIN = ".nebulacodeacademy.com"

    SECURE_SSL_REDIRECT = True

# --- LOCAL (make cookies work on http://localhost) ---
else:
    SECURE_PROXY_SSL_HEADER = None
    USE_X_FORWARDED_HOST = False

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SAMESITE = "Lax"

    # IMPORTANT: no cookie domain for localhost
    SESSION_COOKIE_DOMAIN = None
    CSRF_COOKIE_DOMAIN = None

    SECURE_SSL_REDIRECT = False

    # Ensure the default auth backend is enabled
    AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # must be present for admin
    # ...any others you use
]


if ENV in ('staging', 'production'):
    SECURE_SSL_REDIRECT = True if os.getenv('SECURE_SSL_REDIRECT', '').strip() == '' else SECURE_SSL_REDIRECT
    SESSION_COOKIE_SECURE = True if os.getenv('SESSION_COOKIE_SECURE', '').strip() == '' else SESSION_COOKIE_SECURE
    CSRF_COOKIE_SECURE = True if os.getenv('CSRF_COOKIE_SECURE', '').strip() == '' else CSRF_COOKIE_SECURE

    # 🔐 behind Railway's proxy
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    USE_X_FORWARDED_HOST = True

    # 🍪 make session/CSRF cookies survive the proxy
    SESSION_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SAMESITE = "Lax"

    # HSTS etc.
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '0' if ENV == 'staging' else '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'true').lower() == 'true'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'true').lower() == 'true'
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'


# ───────────────────────────────── I18N
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ───────────────────────────────── Logging
# Prefer console logging in containers; disable file handlers by default
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {'format': '[{levelname}] {asctime} {name} | {message}', 'style': '{'},
    },
    'handlers': {
        'console': {'class': 'logging.StreamHandler', 'formatter': 'verbose'},
        # If you really want files, ensure the directory exists at startup.
        # 'file': {'class': 'logging.FileHandler', 'filename': str(BASE_DIR / 'logs/app.log'), 'formatter': 'verbose'},
    },
    'loggers': {
        '': {'handlers': ['console'], 'level': LOG_LEVEL},
        'django.request': {'handlers': ['console'], 'level': 'ERROR', 'propagate': False},
    },
}

POLICY_VERSIONS = {
    "terms": "2025-08",      # your current published terms version/tag
    "privacy": "2025-08",    # your current privacy policy version/tag
}
