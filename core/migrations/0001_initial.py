# Generated by Django 5.2.1 on 2025-08-28 01:28

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user_agent', models.CharField(blank=True, help_text='User agent string during the action.', max_length=256, null=True)),
                ('device_type', models.CharField(blank=True, help_text='Parsed device type (mobile, desktop, etc.).', max_length=64, null=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('role', models.CharField(choices=[('ENROLLED', 'Enrolled Student'), ('FREE', 'Free Student'), ('LECTURER', 'Lecturer'), ('VOLUNTEER', 'Volunteer'), ('BLOGGER', 'News Blogger'), ('PARTNER', 'Partner'), ('ADMIN', 'Administrator')], max_length=20)),
                ('program_category', models.CharField(blank=True, choices=[('PRE', 'Pre‑Academy'), ('BEG', 'Beginner'), ('INT', 'Intermediate Diploma'), ('ADV', 'Advanced')], help_text='Required for FREE users; mirrors program level for ENROLLED users.', max_length=3, null=True)),
                ('school_email_verified', models.BooleanField(default=False)),
                ('mfa_enabled', models.BooleanField(default=False, help_text='Whether multi‑factor authentication is enabled')),
                ('social_auth_provider', models.CharField(blank=True, help_text='Provider name for social login', max_length=32, null=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft‑delete flag for GDPR compliance')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when user was soft‑deleted', null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='User avatar/profile image', null=True, upload_to='profile_pics/')),
                ('location', models.CharField(blank=True, help_text="City and country, e.g., 'Leeds, United Kingdom'", max_length=150, null=True)),
                ('theme_preference', models.CharField(blank=True, choices=[('LIGHT', 'Light'), ('DARK', 'Dark')], help_text='Optional theme preference (can override dashboard)', max_length=20, null=True)),
                ('personalised_class_filter', models.CharField(blank=True, choices=[('ALL', 'All Classes'), ('NEBULA_ONLY', 'Only Nebula Lecturers'), ('GUEST_ONLY', 'Only Guest Facilitators')], help_text='Default class filter preference', max_length=20, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('password_changed_at', models.DateTimeField(blank=True, help_text='Timestamp when password was last reset or changed.', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'ordering': ['-date_joined'],
            },
        ),
    ]
